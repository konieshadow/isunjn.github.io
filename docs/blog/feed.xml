<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
	<title>isunjn::blog</title>
	<subtitle>The blog of @isunjn</subtitle>
	<link href="https://isunjn.me/blog/feed.xml" rel="self" type="application/atom+xml"/>
    <link href="https://isunjn.me/blog/"/>
	<updated>2022-04-30T00:00:00+00:00</updated>
	<id>https://isunjn.me/blog/feed.xml</id>
	<entry xml:lang="zh-CN">
		<title>用 TypeScript 实现 SNL 编译器前端</title>
		<published>2022-04-30T00:00:00+00:00</published>
		<updated>2022-04-30T00:00:00+00:00</updated>
		<link href="https://isunjn.me/blog/snl-compiler-in-ts/" type="text/html"/>
		<id>https://isunjn.me/blog/snl-compiler-in-ts/</id>
		<content type="html">&lt;p&gt;SNL (Small Nested Language) 是我校用于教学的一个非常简单(且不完整)的&amp;quot;高级&amp;quot;编程语言, 编译原理的课设就是实现它的编译器前端部分, 我试着用 TypeScript 完成了这个任务, 整体做下来感觉难度不大，确实是个玩具语言的玩具编译器，这里简单记录一下实现过程。&lt;&#x2F;p&gt;
&lt;p&gt;项目地址: &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;isunjn&#x2F;snlc&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;isunjn&#x2F;snlc&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note info&quot;&gt;
    &lt;i class=&quot;ri-information-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
    &lt;div class=&quot;content&quot;&gt;
        
        &lt;p&gt;本文假设读者对 TypeScript 以及编译原理的相关概念有基本的了解&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;h2 id=&quot;snl-yu-yan&quot;&gt;SNL 语言&lt;&#x2F;h2&gt;
&lt;p&gt;这是一个长得基本和 Pascal 一样的过程式语言。变量先声明再使用，数据类型支持整型、字符型、数组、记录，过程允许嵌套定义，允许递归调用。作为一个教学用的简易语言，SNL 有非常大的局限性，比如不支持布尔类型和逻辑运算（但比较表达式实际上会产生一个布尔型的值）、条件表达式必须有 else 块且至少一条语句、字符型仅能声明而不能对其赋值……尽管如此，它仍然“具备高级程序设计语言的常见特征”，至少教材上它自己是这么说 :）&lt;&#x2F;p&gt;
&lt;p&gt;一段简单的 SNL 代码：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;color:#d8dee9;&quot;&gt;&lt;code&gt;&lt;span&gt;program p
&lt;&#x2F;span&gt;&lt;span&gt;type
&lt;&#x2F;span&gt;&lt;span&gt;    t = integer;
&lt;&#x2F;span&gt;&lt;span&gt;var
&lt;&#x2F;span&gt;&lt;span&gt;    t i, j, k;
&lt;&#x2F;span&gt;&lt;span&gt;    char ch;
&lt;&#x2F;span&gt;&lt;span&gt;    array [1..20] of integer arr;
&lt;&#x2F;span&gt;&lt;span&gt;procdure
&lt;&#x2F;span&gt;&lt;span&gt;    fn(integer num);
&lt;&#x2F;span&gt;&lt;span&gt;    begin
&lt;&#x2F;span&gt;&lt;span&gt;        return(num + 1)
&lt;&#x2F;span&gt;&lt;span&gt;    end
&lt;&#x2F;span&gt;&lt;span&gt;begin
&lt;&#x2F;span&gt;&lt;span&gt;    read(i);
&lt;&#x2F;span&gt;&lt;span&gt;    j := i + k;
&lt;&#x2F;span&gt;&lt;span&gt;    fn(j * arr[1])
&lt;&#x2F;span&gt;&lt;span&gt;end.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;你还可以看下 &lt;code&gt;sample&#x2F;&lt;&#x2F;code&gt; 文件夹下的其他几个代码示例，以及 &lt;code&gt;docs&#x2F;snl.bnf&lt;&#x2F;code&gt; （注意该文件并没有按照严格的 BNF 格式书写）&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ci-fa-fen-xi&quot;&gt;词法分析&lt;&#x2F;h2&gt;
&lt;p&gt;编译器的第一个组件是词法分析器（lexer），这个阶段会去除掉源代码（字符序列）的注释和空白符，并将各种字符序列转换成为称之为 Token 的表示形式，得到一个 Token List。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dfa&quot;&gt;DFA&lt;&#x2F;h3&gt;
&lt;p&gt;词法分析的主要依据是该语言的词法 DFA，通过 DFA 判断某段字符序列是否合法、如果合法的话具体是哪种词法元素。&lt;&#x2F;p&gt;
&lt;p&gt;SNL 的 DFA：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;isunjn&#x2F;isunjn.github.io&#x2F;img&#x2F;202205021124104.png&quot; alt=&quot;SNL DFA&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;每个状态会根据当前字符进行判断，是转到另一个状态，还是生成一个 Token，还是出错（图中省略了出错状态）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;token&quot;&gt;Token&lt;&#x2F;h3&gt;
&lt;p&gt;具体到代码实现，我们需要先定义一下 Token 的数据结构。见 &lt;code&gt;src&#x2F;common&#x2F;token.ts&lt;&#x2F;code&gt;，它有四个字段，分别是行号、列号、词法类型（lex）、语义信息（sem）。每个关键字算作一种单独的词法类型，用它的大写表示。并非所有 Token 都有语义信息，标识符、整型、字符型需要记录他们具体的值作为其语义信息，其他 Token 则不需要语义信息部分。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ci-fa-fen-xi-de-shi-xian&quot;&gt;词法分析的实现&lt;&#x2F;h3&gt;
&lt;p&gt;见 &lt;code&gt;src&#x2F;lexer.ts&lt;&#x2F;code&gt;，我们给 DFA 中的每个状态写一个函数，处理该状态内部的情况，这些状态处理函数的参数是当前正在处理的字符和一个将来可能会用作语义信息的字符数组，返回值是另一个状态处理函数（的引用）或者一个 Token 或者一个词法错误。&lt;&#x2F;p&gt;
&lt;p&gt;lexer 函数会对全局变量进行初始化并调用 tokenizer，tokenizer 负责每次完成一个 Token 的解析，返回一个 Token 或一个 LexError。（其实 tokenizer 也是词法分析器的意思，和 lexer 是同义词，不过用在这里表示识别一个 Token 好像也说得过去）&lt;&#x2F;p&gt;
&lt;p&gt;词法分析要考虑的点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;字符有时需要“向前看”，当读入下一个字符并判断后可能需要进行回退（goBack），回退时需要考虑好行号和列号的变化&lt;&#x2F;li&gt;
&lt;li&gt;注释和空白也作为 Token 返回，但并不加入最终的 Token List&lt;&#x2F;li&gt;
&lt;li&gt;标识符判定时需要判断是否是语言关键字&lt;&#x2F;li&gt;
&lt;li&gt;根据所处状态进行相应的错误处理（我这里的实现并没有考虑到错误恢复，可能会导致错误连环出现）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;yu-fa-fen-xi&quot;&gt;语法分析&lt;&#x2F;h2&gt;
&lt;p&gt;词法分析完成后，（如果没有词法错误）我们就得到了源程序的 Token List，可以进行下一步的语法分析了。&lt;&#x2F;p&gt;
&lt;p&gt;语法分析根据语言的文法规则对 Token 序列进行解析（parse)，生成一颗抽象语法树（Abstract Syntax Tree，AST），或产生语法错误（SyntaxError）。&lt;&#x2F;p&gt;
&lt;p&gt;语言的文法规则是定义好了的，用若干条产生式表示，教材里 SNL 有 104 条产生式，见 &lt;code&gt;docs&#x2F;snl.bnf&lt;&#x2F;code&gt;。这些规则定义了源码中的 Token 序列能以怎样的方式排列起来（即满足语法要求）。&lt;&#x2F;p&gt;
&lt;p&gt;语法分析分为自顶向下分析和自底向上分析，自顶向下又分为递归向下法和 LL(1) 分析法，因为课设要求自顶向下的这两种方法都要做，所以这里实现了两个 parser。&lt;&#x2F;p&gt;
&lt;p&gt;语法分析的相关原理限于篇幅我在这里就不赘述了，只讲一下具体代码实现。&lt;&#x2F;p&gt;
&lt;p&gt;我们首先定义一下描述文法时需要用到的终结符和非终结符类型，请查看 &lt;code&gt;src&#x2F;common&#x2F;grammar.ts&lt;&#x2F;code&gt;，定义文法规则为 &lt;code&gt;Rule&lt;&#x2F;code&gt;，将 104 条规则保存到一个 Map 中，称为 &lt;code&gt;grammar&lt;&#x2F;code&gt;，通过规则的序号来索引。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;predict-ji&quot;&gt;Predict 集&lt;&#x2F;h3&gt;
&lt;p&gt;递归下降法会用到产生式的预测集，当文法中出现一个非终结符有多条产生式的情况时需要根据各产生式的预测集进行下一步动作，LL(1) 分析法也会用到根据预测集构造的预测表。&lt;&#x2F;p&gt;
&lt;p&gt;因为产生式是给定了的，所以实际上预测集也是不变的，可以提前手工计算出来，教材里也是直接给出了（不过教材里的预测集是有错的，话说这教材写得&lt;del&gt;还真是烂呀&lt;&#x2F;del&gt;还真是给了同学们很大的发挥空间）&lt;&#x2F;p&gt;
&lt;p&gt;因为这个玩具项目的主要目的还是学习编译原理，我们实现一遍预测集生成算法也无妨，这里我参考 &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;LL_parser&quot;&gt;LL parser - Wikipedia&lt;&#x2F;a&gt; 里关于 LL(1) 分析表的算法描述，实现了预测集和预测表的生成，见 &lt;code&gt;src&#x2F;common&#x2F;predict.ts&lt;&#x2F;code&gt;，导出的两个函数分别被两个 parser 使用。&lt;&#x2F;p&gt;
&lt;p&gt;这种预测集 “generated on the fly” 的方式其实是不太合理的，没有必要每次编译都重新进行一遍这样结果已经确定的计算，特别是编译器这种性能敏感型程序。这里主要是出于学习目的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ast-ding-yi&quot;&gt;AST 定义&lt;&#x2F;h3&gt;
&lt;p&gt;我们还需要知道语法分析的输出具体是什么，为此我们需要定义抽象语法树的结构，而抽象语法树节点的数据结构定义可能是整个项目最大的难点了。&lt;&#x2F;p&gt;
&lt;p&gt;教材在这里用了一种很奇葩的方式，它将所有不同类型的树节点的字段全部 union 到一个结构体里，再根据类型字段判断哪几个数据字段是有效的……不嫌浪费内存吗.jpg ，正确的做法应该是为每种节点定义一个类型。&lt;&#x2F;p&gt;
&lt;p&gt;SNL 的 AST 有这几种节点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;标识符和整形字面量（没有字符型，因为 SNL 实际上并不支持字符型……）&lt;&#x2F;li&gt;
&lt;li&gt;根节点，包含程序名、声明部分、程序体部分&lt;&#x2F;li&gt;
&lt;li&gt;声明部分，包含类型声明部分、变量声明部分、过程声明部分（过程声明中还包含参数声明部分）&lt;&#x2F;li&gt;
&lt;li&gt;语句，分为条件语句、循环语句、赋值语句、写语句、读语句、返回语句&lt;&#x2F;li&gt;
&lt;li&gt;表达式，分为操作符表达式、常量表达式、标识符表达式（变量表达式）&lt;&#x2F;li&gt;
&lt;li&gt;变量相关节点&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;节点的具体定义请见 &lt;code&gt;src&#x2F;common&#x2F;ast.ts&lt;&#x2F;code&gt;，这里的类型定义使用了 TypeScript 的 type 而不是 JavaScript 的 class，为此需要考虑如何新建节点的问题。因为我们的节点定义里大部分字段的类型并非可为 null 的类型，但后面新建节点时却又需要它暂时为 null，因为在新建时可能还没有字段的具体值，也许应该将其定义为类似 Rust 中的 Option 类型的东西，但这些字段在概念上又确实不为空，所以并不合适，我这里的解决办法是定义了一个 Nullable 泛型，将一个对象类型的所有字段变为可为 null，这样在新建节点时创建目标类型的 Nullable 类型，然后等字段全部赋值后再进行一次类型断言，转为非空类型。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;type Nullable&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;P &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;in keyof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;P&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过 createNode 函数来新建一个 &lt;code&gt;NullableNode&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;，根据 kind 参数的值来新建具体的类型。&lt;&#x2F;p&gt;
&lt;p&gt;这样处理确实能用，但感觉不太优雅，代码看起来也比较怪，也许将每一个类型定义为 class 然后写构造函数会更好一点，我的 TS 水平还有待提高 😢&lt;&#x2F;p&gt;
&lt;p&gt;还有我们的语法分析实现并没有考虑错误恢复，每次识别到一个错误就会停止继续解析，局限性很大。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-gui-xia-jiang-jie-xi&quot;&gt;递归下降解析&lt;&#x2F;h3&gt;
&lt;p&gt;现在有了 AST 的定义，可以进行具体的语法分析了，先来看看更加直观的递归下降法。&lt;&#x2F;p&gt;
&lt;p&gt;所谓递归下降法，说的是为每一个非终结符写一个子程序，处理其产生式右部，终结符则进行匹配，非终结符则递归调用该非终结符的处理子程序。&lt;&#x2F;p&gt;
&lt;p&gt;很容易可以写出这样的代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;parseXX&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#d8dee9;&quot;&gt;node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;createNode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;XX&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#d8dee9;&quot;&gt;currentToken &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;getNext&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(currentToken&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;lex &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;XXX&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;throw new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;SyntaxError&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Expect a XXX&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;xxx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;* somthing generated based on currentToken *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后得为每个非终结符都写上一个这样的函数，属于是累活了。&lt;&#x2F;p&gt;
&lt;p&gt;不过仔细观察我们会发现&amp;quot;拿到下一个 Token，判断是否匹配或是否落入预测集，成功则生成相应值，失败则出错&amp;quot;这样的代码逻辑在每一个 parseXXX 函数中都一样，这里的共性暗示着我们可以为其建立一种抽象。&lt;&#x2F;p&gt;
&lt;p&gt;我们通过构建一种函数式风格的、语义化的链式调用来将这种共性抽象出来，它用起来大概是这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;xxx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;XXX&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;then_take&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;or_err&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Expect a `xxx`&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里链式调用的关键是需要为我们的抽象定义一个类，这个类的实例方法会返回类实例本身，因此就可以再次调用另一个实例方法。我们将这个类称为 ParsingWorker，调用 next 函数会返回一个 ParsingWorker 的实例，该实例记录着当前的 Token，然后通过其上的实例方法执行具体的递归下降解析逻辑。&lt;&#x2F;p&gt;
&lt;p&gt;ParsingWorker 上主要有这几个字段：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;token&lt;&#x2F;code&gt; - 当前正在处理的 Token&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;result&lt;&#x2F;code&gt; - 每个 Worker 最终都有可能产生一个值（也可能不产生值），用来赋值给某个语法树节点的字段，这个值就是该 Worker 的 result&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;miss&lt;&#x2F;code&gt; - 布尔值，当 match 失败或预测集判定失败时置为真&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;实例方法主要有：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;match&lt;&#x2F;code&gt; - 判断当前 Token 是否匹配某个终结符&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;in_predict&lt;&#x2F;code&gt; - 判断当前 Token 是否在某个预测集里&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;then_take&lt;&#x2F;code&gt; - 此方法有一个可选的函数参数，当提供这个函数参数时，就执行它，把其返回值作为最终的 result，如果没有该参数，则根据当前 Token 来产生一个相应的 result&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;or_err&lt;&#x2F;code&gt; - 若 miss，则 throw 一个语法错误，若没有 miss，则返回 result&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;具体代码还有更多的逻辑细节，比如它还需要两个泛型参数，用来指定 result 的类型。这里就不展开详细说了，请查看 &lt;code&gt;src&#x2F;rd-parser.ts&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;基于 ParsingWorker 我们可以写出这样的 parse 函数：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;parseProgram&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Program&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#d8dee9;&quot;&gt;node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;createNode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Program&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;PROGRAM&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;or_err&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Expect keyword `program`&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Identifier&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;ID&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;then_take&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;or_err&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Expect an identifier&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;declare &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;parseDeclarePart&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;body &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;parseProgramBody&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;DOT&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;or_err&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Expect `.`&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Program&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;parseTypeDecMore&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;TypeDeclaration&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;TypeDeclaration&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;in_predict&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;then_take&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;in_predict&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;then_take&lt;&#x2F;span&gt;&lt;span&gt;(parseTypeDecList)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;or_err&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Expect an identifier or keyword `var`, `procedure`, `begin`&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到代码更加简短，且更加语义化。&lt;&#x2F;p&gt;
&lt;p&gt;更高层级的抽象通常会带来额外的性能开销，这里的 ParsingWorker 跟直接在每个 parse 函数里写 if 相比会有新建实例和方法调用的额外开销，而编译器属于偏底层、性能敏感型的系统级程序，一个真实世界中 non-trivial 的编译器一定不会大量使用有额外开销的抽象。不过咱这是个玩具编译器，为了简洁性和语义化牺牲一点性能完全是可以接受的。&lt;&#x2F;p&gt;
&lt;p&gt;学习 Rust 时接触到一个叫做零开销抽象（zero-cost abstraction）的概念，指的是语言为你提供的抽象相比你自己手写的不会开销更大，相反只会更加高效，&amp;quot;What you don’t use, you don’t pay for. And further: What you do use, you couldn’t hand code any better.&amp;quot; 实现这一目标需要语言的精心设计和编译器的优化。Rust 尽力提供零开销抽象，使得在享受抽象带来的便利的同时不会有额外的性能开销，这对于性能敏感型程序是很重要的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ll-1-jie-xi&quot;&gt;LL(1)解析&lt;&#x2F;h3&gt;
&lt;p&gt;LL(1) 解析和递归下降解析的思路是相似的，只不过是把递归的系统调用栈改为自己手动维护的符号栈而已。LL(1) 解析的主要算法请见 &lt;code&gt;src&#x2F;ll1-parser.ts&lt;&#x2F;code&gt; 中的 &lt;code&gt;parse&lt;&#x2F;code&gt; 函数。&lt;&#x2F;p&gt;
&lt;p&gt;问题在于，我们不仅要对 Token 序列是否合法进行判定，还需要在判定的过程中构建抽象语法树。为此除了符号栈之外，还需要一个语法树栈，以及用于处理表达式的操作数栈和操作符栈。&lt;&#x2F;p&gt;
&lt;p&gt;构建语法树的主要思路是，在将产生式右部压入符号栈时适时地进行一些额外的动作（这里称之为 action），比如创建一个相应的树节点并将其字段指针压入语法树栈，后面再生成节点时会从语法树栈中弹出一个这样的字段指针并将其赋值为该新建的节点，新节点的字段也相应地入栈。&lt;&#x2F;p&gt;
&lt;p&gt;JS&#x2F;TS 并没有指针类型，你无法取到一个值的“地址”，不过我们可以通过 JS 对象的 &lt;em&gt;可计算属性&lt;&#x2F;em&gt; 来模拟出字段指针的效果。JS 的可计算属性指的是对象的字段可以通过一个在运行时求值的字符串来访问（方括号语法）。语法树栈中的元素是一个二元组，包含一个节点本身的引用和该节点某个字段的字符串表示，这样就可以在后面弹栈后对这个字段进行赋值。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;type Pointer = &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Record&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;unknown&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#d8dee9;&quot;&gt;astStack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Pointer&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#d8dee9;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#d8dee9;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;astStack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;node[key] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里这个所谓的 Pointer 类型是不能保证类型安全的，需要手动保证字段和节点类型相匹配。&lt;&#x2F;p&gt;
&lt;p&gt;大部分的 action 都是“创建一个新节点，弹出语法树栈的栈顶元素，将其赋值成该新节点，将新节点的相应字段压入语法树栈”，我们将其抽象到一个 &lt;code&gt;link&lt;&#x2F;code&gt; 函数，表示“连接”到语法树。然后观察产生式，为每个产生式定义一个相应的 action（一个函数），大部分 action 都只是调用一次 &lt;code&gt;link&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;处理表达式时需要额外的考虑，因为需要处理操作符的优先级问题，所以不能简单地“link”，需要利用操作符栈和操作数栈来构建优先级正确的表达式节点，然后再“link”到语法树上。&lt;&#x2F;p&gt;
&lt;p&gt;观察产生式可以得到这样的结论：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在处理 83 号产生式时开始一个表达式的处理&lt;&#x2F;li&gt;
&lt;li&gt;在处理 84 号产生式时结束一个表达式的处理，生成本次的表达式节点&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;观察产生式中有关表达式的其他一些性质，发现还需要 3 个标志变量：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;exp_should_link&lt;&#x2F;code&gt; - 表示本次表达式是否需要连接到语法树&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;exp_should_sibling&lt;&#x2F;code&gt; - 表示本次的表达式节点是否有兄弟节点&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;exp_not_over&lt;&#x2F;code&gt; - 表示本次的表达式是否还没有结束&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在开始处理表达式时（83 号产生式的 action 处）我们为每个表达式记录一些信息，存在 &lt;code&gt;exp_info_stack&lt;&#x2F;code&gt; 中，这个栈的元素是一个三元组：在操作数栈中的开始位置、是否需要连接、是否有兄弟节点。&lt;&#x2F;p&gt;
&lt;p&gt;然后在和表达式相关的产生式的 action 中对这些标志变量以及操作数栈和操作符栈进行相应的操作就可以正确地构造出优先级正确的表达式节点了，注意在处理表达式时也会暂时性地用到语法树栈。具体的处理逻辑请看代码。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yu-yi-fen-xi&quot;&gt;语义分析&lt;&#x2F;h2&gt;
&lt;p&gt;完成语法分析后得到了语法树，相应的语法错误也得以检测，下一个步骤是语义分析。由于本项目只完成编译器前端部分，所以语义分析模块只检测语义错误，没有别的输出。&lt;&#x2F;p&gt;
&lt;p&gt;SNL 的语义错误包括：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;标识符重复定义&lt;&#x2F;li&gt;
&lt;li&gt;标识符未声明&lt;&#x2F;li&gt;
&lt;li&gt;标识符未非期望的标识符类型&lt;&#x2F;li&gt;
&lt;li&gt;数组定义时下界大于上界（教材里很奇怪地把这个错误叫做数组下标越界，但真正的“数组下标越界”应该一个运行时错误，而不是编译时错误）&lt;&#x2F;li&gt;
&lt;li&gt;数组索引不是整型，记录类型的域变量引用不合法&lt;&#x2F;li&gt;
&lt;li&gt;赋值语句两侧类型不匹配&lt;&#x2F;li&gt;
&lt;li&gt;赋值语句左侧不是变量标识符&lt;&#x2F;li&gt;
&lt;li&gt;过程调用中形实参类型不匹配&lt;&#x2F;li&gt;
&lt;li&gt;过程调用中形实参个数不匹配&lt;&#x2F;li&gt;
&lt;li&gt;过程调用处的标识符不是过程标识符&lt;&#x2F;li&gt;
&lt;li&gt;表达式运算符两侧分量类型不匹配&lt;&#x2F;li&gt;
&lt;li&gt;if 和 while 语句的条件部分不是布尔型（但其实这条在语法分析阶段就得以保证了，SNL 的文法保证了条件部分只能是比较表达式）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;fu-hao-biao&quot;&gt;符号表&lt;&#x2F;h3&gt;
&lt;p&gt;语义分析的关键在于构造符号表， 记录程序中出现的所有标识符及它的“种类”信息，分为类型标识符、变量标识符和过程标识符，符号表项称为 &lt;code&gt;TableItem&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;类型标识符需要以某种形式记录它的“类型”，变量标识符也需要，另外还需要记录变量是按值访问还是按引用访问，过程标识符则需要记录参数的信息，一个参数可以当作一个变量标识符来对待。&lt;&#x2F;p&gt;
&lt;p&gt;“类型”信息使用 &lt;code&gt;Ty&lt;&#x2F;code&gt; 来表示，整形、字符型、布尔型属于原始类型，只需要单独的一个实例就可以，array 和 record 类型则每个类型都不同，需要记录自己的额外信息，array 需要记录它的元素的“类型”，record 需要记录它的域的相关信息。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;TableItem&lt;&#x2F;code&gt; 和 &lt;code&gt;Ty&lt;&#x2F;code&gt; 的具体定义请见 &lt;code&gt;src&#x2F;sem-analyzer.ts&lt;&#x2F;code&gt;，当处理程序时，每个作用域会有一个符号表，整个程序有一个 &lt;code&gt;Ty&lt;&#x2F;code&gt; 表（一个数组）来记录所有出现的“类型”。&lt;&#x2F;p&gt;
&lt;p&gt;语义分析在分析程序的声明部分时建立符号表，在分析程序的语句部分时遇到标识符则查找符号表，在这个过程中进行类型检查和其他语义错误检测。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zuo-yong-yu&quot;&gt;作用域&lt;&#x2F;h3&gt;
&lt;p&gt;语义分析的一个关键在于“作用域”的处理，SNL 支持嵌套过程定义，每个过程内部都算作一个新的作用域，在这个作用域里可能会存在作用域遮蔽效应，即本地标识符定义覆盖了外部作用域中的标识符定义。&lt;&#x2F;p&gt;
&lt;p&gt;每个作用域都有一个符号表，这些符号表组织在一个栈中。&lt;&#x2F;p&gt;
&lt;p&gt;代码实现上语义分析分为 build 和 check 两个主要动作，在声明部分（主程序的和每个过程的）进行构建&#x2F;维护符号表（build），在语句部分进行相应的语义检查（check），遇到过程定义时递归地向下处理，这时会新建一个作用域（nest in），处理完一个过程后销毁该作用域（nest out）&lt;&#x2F;p&gt;
&lt;p&gt;check 可以分为语句检查、表达式检查和变量检查，在 check 阶段只需要针对上面列出的语义错误在相应的位置写具体的逻辑就好。具体逻辑请看代码，注意代码里的 &lt;code&gt;Scope&lt;&#x2F;code&gt; 类表示整个作用域集合，而不是单独的一层作用域。&lt;&#x2F;p&gt;
&lt;p&gt;到这里，这个玩具编译器（前端）就基本完成了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ming-ling-xing-jie-mian&quot;&gt;命令行界面&lt;&#x2F;h2&gt;
&lt;p&gt;再来做一下命令行界面，命令称为 &lt;code&gt;snlc&lt;&#x2F;code&gt; (SNL Compiler)，第一个参数是需要编译的 snl 文件路径，另外有这些标志参数：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--set&lt;&#x2F;code&gt; 打印预测集&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--table&lt;&#x2F;code&gt; 打印预测表&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--token&lt;&#x2F;code&gt; 打印 Token 列表&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--ast&lt;&#x2F;code&gt; 打印抽象语法树&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--ll&lt;&#x2F;code&gt; 使用 LL(1) parser，默认是递归下降 parser&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;pretty-print&quot;&gt;Pretty Print&lt;&#x2F;h3&gt;
&lt;p&gt;还可以让命令行输出更加“用户友好”一些。&lt;&#x2F;p&gt;
&lt;p&gt;打印错误信息时模仿了 Rust 编译器的错误输出风格，会显示行号和那一行的代码，指出错误的位置。&lt;&#x2F;p&gt;
&lt;p&gt;打印 AST 时则使用了 Linux 的 tree 命名风格的树形输出，这个效果的实现关键在于递归打印时维护一个 prefix 栈。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;isunjn&#x2F;snlc&#x2F;blob&#x2F;main&#x2F;docs&#x2F;example.png?raw=true&quot; alt=&quot;样例输出截图&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;总的来说，这确实是一个大学生课设级别的玩具语言的玩具编译器实现，还只有前端部分，但真正动手实现一个编译器仍然让我学到了很多东西，也让我体会到了编译器的奥妙。等之后有时间了想再系统地学一学相关的知识，看一下那本编译原理龙书，还有那本《Crafting Interpreters》，可能要等到秋招之后了。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="zh-CN">
		<title>Serene - 一款简洁优雅的博客主题</title>
		<published>2022-01-19T00:00:00+00:00</published>
		<updated>2022-04-19T00:00:00+00:00</updated>
        <summary>&lt;p&gt;追求形式确实比追求内容要容易许多，有很多想写&#x2F;计划写博客的人文章还没写多少，却把时间都花在了折腾写作工具、选主题、改样式之上……我就是其中之一，实在惭愧 😢&lt;&#x2F;p&gt;
&lt;p&gt;因为多少有一点强迫症，看了好多别的博客主题，都不是很满意，自己就动手写了一个。其实写这种静态的博客主题主要是写 CSS，并没有太多的&#x27;技术含量&#x27;，主要还是审美和设计，过程中思考了一些关于博客内容和样式的东西，觉得还是值得说一说的。&lt;&#x2F;p&gt;
</summary>
		<link href="https://isunjn.me/blog/serene-theme/" type="text/html"/>
		<id>https://isunjn.me/blog/serene-theme/</id>
		<content type="html">&lt;p&gt;追求形式确实比追求内容要容易许多，有很多想写&#x2F;计划写博客的人文章还没写多少，却把时间都花在了折腾写作工具、选主题、改样式之上……我就是其中之一，实在惭愧 😢&lt;&#x2F;p&gt;
&lt;p&gt;因为多少有一点强迫症，看了好多别的博客主题，都不是很满意，自己就动手写了一个。其实写这种静态的博客主题主要是写 CSS，并没有太多的&#x27;技术含量&#x27;，主要还是审美和设计，过程中思考了一些关于博客内容和样式的东西，觉得还是值得说一说的。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;主题取名 serene，有平静、清澈、晴朗之意。&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;isunjn&#x2F;serene&quot;&gt;GitHub&lt;&#x2F;a&gt; | &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;serene-demo-site.vercel.app&quot;&gt;Demo&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;很多博客（主题）会给人一种花里胡哨的感觉，每次看到有的博客站点一堆与内容无关的图片等元素时都有点反感，加一点还觉得活泼有特点，加一堆就感觉有点主次不分了。当然个人网站&#x2F;博客有风格一点完全无可厚非，只是我个人更喜欢简洁一点的。个人认为博客还是应当以内容为主，突出文字，少一些对阅读的干扰。&lt;&#x2F;p&gt;
&lt;p&gt;Serene 围绕“阅读”的一些功能考虑：&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ce-lan-mu-lu&quot;&gt;侧栏目录&lt;&#x2F;h2&gt;
&lt;p&gt;我个人看文章喜欢先扫一眼标题大纲，有个大概的概念，可以了解这篇文章要说什么，很多博客（主题）都没有。&lt;&#x2F;p&gt;
&lt;p&gt;Serene 的文章主体是居中的，目录在文章右侧，是 sticky 的，很多有目录的博客（主题）的目录不是 sticky 的，显示在页面顶部，往下划就看不到了，比没有目录还让人抓狂。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yue-du-jin-du-tiao&quot;&gt;阅读进度条&lt;&#x2F;h2&gt;
&lt;p&gt;Serene 可以设置显示一个在 header 下方的阅读进度条。加这个功能是因为我自己在阅读一些博客文章的时候会希望对进度和时间有个大概的把握，网页自身的进度条通常并不能提供文章本身的进度信息，因为页面下方通常会有评论区等。一些博客（主题）会显示一个根据字数得到的估计阅读时间，这个我感觉参考意义不大，每个人阅读速度、习惯、目的以及文章本身的类型其实都不太一样，简单显示一下字数可能还比较靠谱。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;an-se-mo-shi&quot;&gt;暗色模式&lt;&#x2F;h2&gt;
&lt;p&gt;Serene 的暗色模式可以做到：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;第一次访问时根据浏览器偏好设置亮&#x2F;暗色&lt;&#x2F;li&gt;
&lt;li&gt;手动切换亮&#x2F;暗色&lt;&#x2F;li&gt;
&lt;li&gt;页面在偏好更改时会自动跟随切换亮&#x2F;暗色（不过这个用处不是很大）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;guo-shi-ti-xing&quot;&gt;过时提醒&lt;&#x2F;h2&gt;
&lt;p&gt;一些技术向的文章可能会有较强的时效性，文章的部分内容可能一段时间后就会过时&#x2F;不再适用。Serene 可以设置在若干天后在文章顶部显示一条（可能）过时提醒，是否过时以及多长时间后过时可以每篇文章单独设置。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;callout&quot;&gt;Callout&lt;&#x2F;h2&gt;
&lt;p&gt;你可能经常在一些文档类站点看到一些诸如 info、important、tip、warning 等的起强调作用、背景颜色不同的文字块，这个被叫做 callout 或 admonition。Serene 通过 Zola 提供的 shortcodes 特性支持了这个，效果如示例站点的&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;serene-demo-site.vercel.app&#x2F;blog&#x2F;admonitions&#x2F;&quot;&gt;这个页面&lt;&#x2F;a&gt;所示，可以给文章增加一些强调或趣味性。&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note info&quot;&gt;
    &lt;i class=&quot;ri-information-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
    &lt;div class=&quot;content&quot;&gt;
        
        &lt;p&gt;Here&#x27;s some relevant information about ...&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note important&quot;&gt;
    &lt;i class=&quot;ri-error-warning-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
    &lt;div class=&quot;content&quot;&gt;
        
        &lt;p&gt;It&#x27;s important to remember that ...&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote class=&quot;note warning&quot;&gt;
    &lt;i class=&quot;ri-alarm-warning-line ri-lg&quot;&gt;&lt;&#x2F;i&gt;
    &lt;div class=&quot;content&quot;&gt;
        
        &lt;p&gt;BREAKING !!!&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;不过如果别人是用 RSS 阅读你的包含 callout 的文章，这些文字块会显示为普通的 &lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qi-ta-yi-xie-xi-jie&quot;&gt;其他一些细节&lt;&#x2F;h2&gt;
&lt;p&gt;分类、标签、返回顶部按钮、评论支持、流量统计工具支持等博客站点常见的功能也都是有的。另外还有一些细节：毛玻璃效果、一致的主题色、图片缩放、平滑滚动、CC 协议声明等。&lt;&#x2F;p&gt;
&lt;p&gt;另外我对 Gitalk 的 CSS 做了一些修改以便它可以适配暗色模式以及跟随主题色。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;希望你不要像我一样想写博客却在这些不是最重要的事情上花了太多时间，还是先写点东西出来吧……&lt;&#x2F;p&gt;
&lt;p&gt;如果这个主题能帮到别人少折腾的话，就再好不过了 🥲&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="zh-CN">
		<title>Say Hello Again</title>
		<published>2021-10-21T00:00:00+00:00</published>
		<updated>2021-10-21T00:00:00+00:00</updated>
		<link href="https://isunjn.me/blog/say-hello-again/" type="text/html"/>
		<id>https://isunjn.me/blog/say-hello-again/</id>
		<content type="html">&lt;p&gt;这是博客的第一篇文章。我很喜欢个人博客这种形式，除了通过其他人的博客学了很多技术相关的东西之外，个人博客往往还会有一些作者本人的经历、思考和感悟，有一种独特的人文关怀感，曾带给我许多感动。&lt;&#x2F;p&gt;
&lt;p&gt;在茫茫的互联网上拥有一个属于自己的空间可以记录、表达、分享，确实很吸引人，不过很多人(就比如我)往往过分注重形式，忽视了博客最重要的其实是有价值的内容，是持续的思考和写作。可能因为有一点强迫症，我搭建过好几次博客，用静态网站生成器做一个博客站点很容易，但是总感觉不是我想要的样子，自己当时也没有内容才是关键的觉悟，没有写下些什么，就不了了之了。&lt;&#x2F;p&gt;
&lt;p&gt;最终，我还是按自己心中的想法做了&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;isunjn&#x2F;serene&quot;&gt;一个博客主题&lt;&#x2F;a&gt;... 静态网站生成器用的是 &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;getzola.org&quot;&gt;Zola&lt;&#x2F;a&gt;，它是用 Rust 写的，好像每种语言都有相应的 &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;jamstack.org&#x2F;generators&#x2F;&quot;&gt;Static Site Generator&lt;&#x2F;a&gt;，选 Zola 也没什么特殊的理由，只是看文档感觉比较容易上手，各种功能也都有，虽然 Hexo 和 Hugo 用的人更多一些。主题取名 Serene，设计较简洁，围绕阅读做了一些特殊的考虑，我希望这是一个以内容为主的博客主题。书写是为了更好的思考，希望未来能产出一些有价值的内容。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;isunjn&#x2F;isunjn.github.io&#x2F;img&#x2F;202204191340939.jpg&quot; alt=&quot;img&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这张图里是我人生第一个 Hello, World, 是在高考结束后的那个暑假写的。&lt;&#x2F;p&gt;
&lt;p&gt;Hope this traditional incantation can also help me with writing blog :)&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>